import { useState } from "react";
import { Button } from "@/components/ui/button";
import { ExternalLink } from "lucide-react";

const CodePlayground = () => {
  const [activeTab, setActiveTab] = useState("html");

  const codeExamples = {
    html: {
      title: "Return HTML",
      code: `export default {
  async fetch(request) {
    const html = \`<!DOCTYPE html>
    <body>
      <h1>Hello World</h1>
      <p>This markup was generated by a Cloudflare Worker.</p>
    </body>\`;

    return new Response(html, {
      headers: {
        "content-type": "text/html;charset=UTF-8",
      },
    });
  },
};`,
      playgroundUrl: "https://workers.cloudflare.com/playground",
    },
    json: {
      title: "Return JSON",
      code: `export default {
  async fetch(request) {
    const data = {
      hello: "world",
    };

    return Response.json(data);
  },
};`,
      playgroundUrl: "https://workers.cloudflare.com/playground",
    },
    fetch: {
      title: "Fetch HTML",
      code: `export default {
  async fetch(request) {
    /**
     * Replace \`remote\` with the host you wish to send requests to
     */
    const remote = "https://example.com";

    return await fetch(remote, request);
  },
};`,
      playgroundUrl: "https://workers.cloudflare.com/playground",
    },
    redirect: {
      title: "Redirect",
      code: `export default {
  async fetch(request) {
    const destinationURL = "https://example.com";
    const statusCode = 301;
    return Response.redirect(destinationURL, statusCode);
  },
};`,
      playgroundUrl: "https://workers.cloudflare.com/playground",
    },
    proxy: {
      title: "Respond with another site",
      code: `export default {
  async fetch(request) {
    async function MethodNotAllowed(request) {
      return new Response(\`Method \${request.method} not allowed.\`, {
        status: 405,
        headers: {
          Allow: "GET",
        },
      });
    }
    // Only GET requests work with this proxy.
    if (request.method !== "GET") return MethodNotAllowed(request);
    return fetch(\`https://example.com\`);
  },
};`,
      playgroundUrl: "https://workers.cloudflare.com/playground",
    },
  };

  const tabs = [
    { id: "html", label: "Return HTML" },
    { id: "json", label: "Return JSON" },
    { id: "fetch", label: "Fetch HTML" },
    { id: "redirect", label: "Redirect" },
    { id: "proxy", label: "Respond with another site" },
  ];

  return (
    <section className="py-16 bg-gray-50 hidden md:block">
      <div className="container">
        <div className="max-w-6xl mx-auto">
          <h2 className="text-3xl font-bold mb-8">Build with Cloudflare</h2>
          
          <div className="flex gap-8">
            <div className="w-64 flex-shrink-0">
              <div className="bg-white rounded-lg border p-4">
                <div className="space-y-2">
                  {tabs.map((tab) => (
                    <button
                      key={tab.id}
                      onClick={() => setActiveTab(tab.id)}
                      className={`w-full text-left px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                        activeTab === tab.id
                          ? "bg-cloudflare-orange text-white"
                          : "text-gray-700 hover:bg-gray-100"
                      }`}
                    >
                      {tab.label}
                    </button>
                  ))}
                </div>
              </div>
            </div>

            <div className="flex-1">
              <div className="bg-gray-900 rounded-lg overflow-hidden">
                <div className="p-6">
                  <pre className="text-green-400 text-sm overflow-x-auto">
                    <code>{codeExamples[activeTab as keyof typeof codeExamples].code}</code>
                  </pre>
                </div>
                <div className="border-t border-gray-700 bg-gray-800 p-4 flex justify-end">
                  <Button 
                    className="bg-cloudflare-orange hover:bg-cloudflare-orange/90 text-white"
                    asChild
                  >
                    <a 
                      href={codeExamples[activeTab as keyof typeof codeExamples].playgroundUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="inline-flex items-center gap-2"
                    >
                      Run Worker in Playground
                      <ExternalLink className="h-4 w-4" />
                    </a>
                  </Button>
                </div>
              </div>

              <div className="mt-6 bg-white rounded-lg border p-6">
                <div className="flex items-center justify-between">
                  <span className="font-semibold">Learn more about Workers</span>
                  <Button variant="outline" asChild>
                    <a href="/workers" className="inline-flex items-center gap-2">
                      Get started
                      <ArrowRight className="h-4 w-4" />
                    </a>
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default CodePlayground;